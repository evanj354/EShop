{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport storage from 'redux-persist/lib/storage';\nimport itemReducer from '../reducers/cart';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore, persistReducer } from 'redux-persist'; // let store;\n// function initStore(initialState) {\n//     return createStore(\n//       itemReducer,\n//       initialState,\n//       composeWithDevTools(applyMiddleware(thunkMiddleware))\n//     )\n//   }\n//   export const initializeStore = (preloadedState) => {\n//     let _store = store ?? initStore(preloadedState)\n//     // After navigating to a page with an initial Redux state, merge that state\n//     // with the current state in the store, and create a new store\n//     if (preloadedState && store) {\n//       _store = initStore({\n//         ...store.getState(),\n//         ...preloadedState,\n//       })\n//       // Reset the current store\n//       store = undefined\n//     }\n//     // For SSG and SSR always create a new store\n//     if (typeof window === 'undefined') return _store\n//     // Create the store once in the client\n//     if (!store) store = _store\n//     return _store\n//   }\n//   export function useStore(initialState) {\n//     const store = useMemo(() => initializeStore(initialState), [initialState])\n//     return store\n//   }\n\nvar persistConfig = {\n  key: 'root',\n  storage: storage\n};\nvar persistedReducer = persistReducer(persistConfig, itemReducer);\nvar store = createStore(persistedReducer);\nvar persistor = persistStore(store); //Subscribe a method to the store so each time an action is dispatched against the store the function is called\n\nstore.subscribe(function () {\n  console.log('Cart Items: ', store.getState());\n});\nexport { store, persistor };","map":{"version":3,"sources":["/Users/evan/Desktop/Desktop/Coding/EShop/pages/store/store.js"],"names":["createStore","applyMiddleware","storage","itemReducer","thunkMiddleware","composeWithDevTools","persistStore","persistReducer","persistConfig","key","persistedReducer","store","persistor","subscribe","console","log","getState"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAGA,IAAMC,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,MADa;AAElBP,EAAAA,OAAO,EAAEA;AAFS,CAAtB;AAOA,IAAMQ,gBAAgB,GAAGH,cAAc,CAACC,aAAD,EAAgBL,WAAhB,CAAvC;AAEA,IAAMQ,KAAK,GAAGX,WAAW,CACrBU,gBADqB,CAAzB;AAGA,IAAIE,SAAS,GAAGN,YAAY,CAACK,KAAD,CAA5B,C,CAEA;;AACAA,KAAK,CAACE,SAAN,CAAgB,YAAM;AAClBC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BJ,KAAK,CAACK,QAAN,EAA5B;AACH,CAFD;AAIA,SAAQL,KAAR,EAAeC,SAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport storage from 'redux-persist/lib/storage';\nimport itemReducer from '../reducers/cart';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore, persistReducer } from 'redux-persist';\n\n// let store;\n\n// function initStore(initialState) {\n//     return createStore(\n//       itemReducer,\n//       initialState,\n//       composeWithDevTools(applyMiddleware(thunkMiddleware))\n//     )\n//   }\n  \n//   export const initializeStore = (preloadedState) => {\n//     let _store = store ?? initStore(preloadedState)\n  \n//     // After navigating to a page with an initial Redux state, merge that state\n//     // with the current state in the store, and create a new store\n//     if (preloadedState && store) {\n//       _store = initStore({\n//         ...store.getState(),\n//         ...preloadedState,\n//       })\n//       // Reset the current store\n//       store = undefined\n//     }\n  \n//     // For SSG and SSR always create a new store\n//     if (typeof window === 'undefined') return _store\n//     // Create the store once in the client\n//     if (!store) store = _store\n  \n//     return _store\n//   }\n  \n//   export function useStore(initialState) {\n//     const store = useMemo(() => initializeStore(initialState), [initialState])\n//     return store\n//   }\n\n\nconst persistConfig = {\n    key: 'root',\n    storage: storage,\n    \n}\n\n\nconst persistedReducer = persistReducer(persistConfig, itemReducer);\n\nconst store = createStore(\n    persistedReducer);\n\nlet persistor = persistStore(store);\n\n//Subscribe a method to the store so each time an action is dispatched against the store the function is called\nstore.subscribe(() => {\n    console.log('Cart Items: ', store.getState());\n})\n\nexport {store, persistor};"]},"metadata":{},"sourceType":"module"}